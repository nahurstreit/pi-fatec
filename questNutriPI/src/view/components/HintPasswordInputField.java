package view.components;

import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;

/**
 * Classe que estende HintInputField para controlar Inputs do Usu√°rio que devem ser escondidos ao mesmo tempo que
 * fornece um texto de orienta√ß√£o de preenchimento chamado "hint".
 * @see view.components.HintInputField
 */
public class HintPasswordInputField extends HintInputField {
	private static final long serialVersionUID = 1L;
	
    private ArrayList<Character> realText = new ArrayList<Character>(); //Vari√°vel que armazena o verdadeiro texto digitado pelo usu√°rio
    private int currentCaret = 0; //Vari√°vel que controla o caret(barra de localiza√ß√£o) durante a digita√ß√£o.

	/**
	 * M√©todo Construtor da classe para controlar inputs do usu√°rio que devem ser escondidos ao mesmo tempo que fornece uma dica de preenchimento
	 * @param hint -> (String) Texto a ser exibido na dica
	 * @param size -> (Dimension) Inst√¢ncia de Dimension para controlar o tamanho do TextField
	 * @param fontSize -> (float) Tamanho de exibi√ß√£o da fonte durante o preenchimento
	 */
    public HintPasswordInputField(String hint, Dimension size, float fontSize) {
    	super(hint, size, fontSize);
    	this.setText(hint);
    	this.addKeyListener(new KeyListener() { //Adiciona um Listener para teclas digitadas
			
			
			/**
			 * Override da a√ß√£o quando uma tecla de texto ou especial √© digitada. Exclui setas e teclas de Fun√ß√£o (FX).
			 * @Override
			 */
			public void keyTyped(KeyEvent e) {
				boolean allowed = true; //Vari√°vel de controle de adi√ß√£o das teclas
				char[] blockedKeys = { //Array com as teclas bloqueadas no input
						 '', //BackSpace
						 '', //Esc
						 '', //
				};
				
				for(char key: blockedKeys) { //Verifica se a tecla digitada √© bloqueada
					if(e.getKeyChar() == key) {
						allowed = false;
					}
				}
				
				if(allowed) {
					addChar(e.getKeyChar()); //Se for permitido aquela tecla, chama o m√©todo que adiciona as teclas ao texto real
				}
			}
			
			/**
			 * Override da a√ß√£o ao liberar uma tecla.
			 * @Override
			 */
			public void keyReleased(KeyEvent e) {
				setHiddenText();
				setCaretPosition(currentCaret);
			}
			
			/**
			 * Override da a√ß√£o de pressionar qualquer tecla.
			 * @Override
			 */
			public void keyPressed(KeyEvent e) {
				int code = e.getKeyCode();
				
				switch(code) { //Switch para atribuir diferentes efeitos conforme teclas s√£o clicadas.
				case KeyEvent.VK_BACK_SPACE:
					try {
						if(realText.size() != 0) {
							if(currentCaret != realText.size()) {
								deleteChar(false);
								
							} else {
								realText.remove(realText.size() - 1);
								currentCaret--;
//								System.out.println(getRealText());
							}
						}
					} catch (IndexOutOfBoundsException e2) {
						System.out.println("String vazia");
					}
					setHiddenText();
					break;
				case KeyEvent.VK_LEFT:
					if(currentCaret - 1 >= 0) currentCaret--;
					break;
				case KeyEvent.VK_RIGHT:
					if(currentCaret + 1 <= realText.size()) currentCaret++;
					break;
				case KeyEvent.VK_CAPS_LOCK:
					break;
				case KeyEvent.VK_DELETE:
					if(realText.size() != 0) {
						if(currentCaret != realText.size()) {
							deleteChar(true);
						}
					}
					break;
				default:					
				}

			}
		});
    }
    
    /**
     * M√©todo que esconde o texto digitado por caracteres '*'
     */
    private void setHiddenText() {
    	String shownText = "";
    	for(int i = 0; i < realText.size(); i++) shownText += "*";
    	super.setText(shownText);
    }
    
    /**
     * M√©todo que recupera o verdadeiro texto digitado pelo usu√°rio
     * @return <b>String</b> -> Representa o verdadeiro texto que o usu√°rio estava digitando.
     */
    public String getRealText() {
    	String text = "";
    	for(int i = 0; i < realText.size(); i++) text += realText.get(i);
    	return text;
    }
    
    /**
     * M√©todo geral que deleta os caracteres anteriormente digitados com a tecla backspace ou delete.
     * @param delKey -> Valor booleano que indica se a tecla digitada foi DEL. As teclas Backspace e
     * DEL usam a mesma l√≥gica, s√≥ mudam um detalhe, portanto a mesma fun√ß√£o foi atribu√≠da a ambas.
     */
    private void deleteChar(boolean... delKey) {
    	boolean delMode = false;
    	if(delKey.length > 0) delMode = delKey[0];
    	ArrayList<Character> beforeHolder;
		ArrayList<Character> afterHolder;
		
		//Separa os valores atuais em dois arrays distintos.
		//A posi√ß√£o de corte do array √© definida se foi pressionado backspace ou del.
		if(delMode) {
			beforeHolder = generateList(realText, 0, currentCaret);
			afterHolder = generateList(realText, currentCaret + 1, realText.size());
		} else {
			beforeHolder = generateList(realText, 0, currentCaret - 1);
			afterHolder = generateList(realText, currentCaret, realText.size());
		}

		//Reseta o texto real
		realText = new ArrayList<Character>();
	
		//Junta os arrays separados e forma o texto real novamente com um caractere exclu√≠do.
		realText.addAll(beforeHolder);
		realText.addAll(afterHolder);
    }
    
    /**
     * M√©todo que adiciona ao texto real o caractere clicado. √â feita a verifica√ß√£o de onde colocar o caractere.
     * <br>Se o caret estiver em uma posi√ß√£o diferente do final, signifca que o usu√°rio quer adicionar o caractere
     * em um espa√ßo no meio do que j√° foi digitado, portanto a mesma ideia de separar o texto atual em dois arrays √© 
     * realizada.
     * @param c -> (char) que indica o caractere a ser adicionado.
     */
    private void addChar(char c) {
    	if(currentCaret != realText.size()) {
        	ArrayList<Character> beforeHolder;
    		ArrayList<Character> afterHolder;
    		
			beforeHolder = generateList(realText, 0, currentCaret);
			afterHolder = generateList(realText, currentCaret, realText.size());
			
			beforeHolder.add(c);
			
			realText = new ArrayList<Character>();
			realText.addAll(beforeHolder);
			realText.addAll(afterHolder);
		
    	} else {
    		realText.add(c);

    	}
		currentCaret++;
		System.out.println(getRealText());
    }
    
    
    /**
     * M√©todo gen√©rico para a c√≥pia de um trecho uma lista, come√ßando de um ponto determinando e indo at√© outro ponto determinado.
     * @param originList -> (ArrayList<-Character->) A lista de origem
     * @param startIndex -> (int) n√∫mero que representa a posi√ß√£o relativa de in√≠cio no array de origem
     * @param endIndex -> (int) ponto final da c√≥pia
     * @return <b>ArrayList<-Character-></> -> retorna a lista dividida pelos par√¢metros passados.
     */
    private ArrayList<Character> generateList(ArrayList<Character> originList, int startIndex, int endIndex) {
    	try {
        	ArrayList<Character> holderList = new ArrayList<Character>();
        	for(int i = startIndex; i < endIndex; i++) {
        		holderList.add(originList.get(i));
        	}
        	return holderList;
		} catch (Exception e) {
			return new ArrayList<Character>();
		}

    }

}